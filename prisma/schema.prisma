generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id             String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email          String          @unique
  name           String?
  cooperative    String
  createdAt      DateTime        @default(now())
  auth_id        String?         @db.Uuid
  borrowers      Borrower[]
  keyTypes       KeyType[]
  lendingRecords LendingRecord[]
}

model KeyType {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  label      String    @db.VarChar(2)
  function   String    @db.VarChar(100)
  accessArea String?
  createdAt  DateTime  @default(now())
  userId     String    @db.Uuid
  keyCopies  KeyCopy[]
  user       User      @relation(fields: [userId], references: [id])
}

model KeyCopy {
  id             String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  keyTypeId      String          @db.Uuid
  copyNumber     Int
  status         KeyStatus       @default(AVAILABLE)
  createdAt      DateTime        @default(now())
  keyType        KeyType         @relation(fields: [keyTypeId], references: [id], onDelete: Cascade)
  lendingRecords LendingRecord[]

  @@unique([keyTypeId, copyNumber])
}

model Borrower {
  id             String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String          @db.VarChar(100)
  email          String?         @db.VarChar(255)
  phone          String?         @db.VarChar(20)
  company        String?         @db.VarChar(100)
  createdAt      DateTime        @default(now())
  userId         String          @db.Uuid
  user           User            @relation(fields: [userId], references: [id])
  lendingRecords LendingRecord[]
}

model LendingRecord {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  keyCopyId    String    @db.Uuid
  borrowerId   String    @db.Uuid
  lentDate     DateTime  @default(now())
  endDate      DateTime?
  notes        String?
  idChecked    Boolean   @default(false)
  returnedDate DateTime?
  createdAt    DateTime  @default(now())
  userId       String    @db.Uuid
  borrower     Borrower  @relation(fields: [borrowerId], references: [id], onDelete: Cascade)
  keyCopy      KeyCopy   @relation(fields: [keyCopyId], references: [id], onDelete: Cascade)
  user         User      @relation(fields: [userId], references: [id])
}

enum KeyStatus {
  AVAILABLE
  OUT
  LOST
}
