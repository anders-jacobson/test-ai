generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Profile {
  id             String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email          String          @unique
  name           String?
  cooperative    String
  createdAt      DateTime        @default(now()) @map("created_at")
  borrowers      Borrower[]
  keyTypes       KeyType[]
  lendingRecords LendingRecord[]

  @@map("profiles")
}

model KeyType {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String    @db.VarChar(100)
  accessArea  String?   @map("access_area")
  totalCopies Int       @default(0) @map("total_copies")
  profileId   String    @map("cooperative_id") @db.Uuid
  createdAt   DateTime  @default(now()) @map("created_at")
  keyCopies   KeyCopy[]
  profile     Profile   @relation(fields: [profileId], references: [id])

  @@map("key_types")
}

model KeyCopy {
  id             String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  keyTypeId      String          @map("key_type_id") @db.Uuid
  copyNumber     Int             @map("copy_number")
  status         KeyStatus       @default(AVAILABLE)
  createdAt      DateTime        @default(now()) @map("created_at")
  keyType        KeyType         @relation(fields: [keyTypeId], references: [id], onDelete: Cascade)
  lendingRecords LendingRecord[]

  @@unique([keyTypeId, copyNumber])
  @@map("key_copies")
}

model Borrower {
  id             String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String          @db.VarChar(100)
  email          String?         @db.VarChar(255)
  phone          String?         @db.VarChar(20)
  company        String?         @db.VarChar(100)
  profileId      String          @map("cooperative_id") @db.Uuid
  createdAt      DateTime        @default(now()) @map("created_at")
  profile        Profile         @relation(fields: [profileId], references: [id])
  lendingRecords LendingRecord[]

  @@map("borrowers")
}

model LendingRecord {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  keyCopyId    String    @map("key_copy_id") @db.Uuid
  borrowerId   String    @map("borrower_id") @db.Uuid
  lentDate     DateTime  @default(now()) @map("lent_date") @db.Date
  endDate      DateTime? @map("end_date") @db.Date
  notes        String?
  idChecked    Boolean   @default(false) @map("id_checked")
  returnedDate DateTime? @map("returned_date") @db.Date
  profileId    String    @map("cooperative_id") @db.Uuid
  createdAt    DateTime  @default(now()) @map("created_at")
  borrower     Borrower  @relation(fields: [borrowerId], references: [id], onDelete: Cascade)
  profile      Profile   @relation(fields: [profileId], references: [id])
  keyCopy      KeyCopy   @relation(fields: [keyCopyId], references: [id], onDelete: Cascade)

  @@map("lending_records")
}

enum KeyStatus {
  AVAILABLE
  OUT
  LOST

  @@map("key_status")
}
