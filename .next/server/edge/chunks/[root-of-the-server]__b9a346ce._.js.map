{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/lib/supabase.ts"],"sourcesContent":["import { createClient } from '@supabase/supabase-js';\n\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;\nconst supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!;\n\nexport const supabase = createClient(supabaseUrl, supabaseAnonKey);\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM;AACN,MAAM;AAEC,MAAM,WAAW,CAAA,GAAA,+LAAA,CAAA,eAAY,AAAD,EAAE,aAAa"}},
    {"offset": {"line": 37, "column": 0}, "map": {"version":3,"sources":["turbopack:///[project]/middleware.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { supabase } from '@/lib/supabase';\n\nconst PUBLIC_PATHS = ['/auth', '/api', '/'];\n\nexport async function middleware(req: NextRequest) {\n  const { pathname } = req.nextUrl;\n  // Allow public paths\n  if (PUBLIC_PATHS.some((p) => pathname.startsWith(p))) {\n    return NextResponse.next();\n  }\n\n  // Check Supabase session\n  const {\n    data: { session },\n  } = await supabase.auth.getSession();\n  if (!session) {\n    const loginUrl = new URL('/auth/login', req.url);\n    return NextResponse.redirect(loginUrl);\n  }\n\n  // TODO: Add more granular route protection if needed\n  return NextResponse.next();\n}\n\nexport const config = {\n  matcher: ['/((?!_next|favicon.ico).*)'],\n};\n"],"names":[],"mappings":";;;;AAAA;AAAA;AACA;;;AAEA,MAAM,eAAe;IAAC;IAAS;IAAQ;CAAI;AAEpC,eAAe,WAAW,GAAgB;IAC/C,MAAM,EAAE,QAAQ,EAAE,GAAG,IAAI,OAAO;IAChC,qBAAqB;IACrB,IAAI,aAAa,IAAI,CAAC,CAAC,IAAM,SAAS,UAAU,CAAC,KAAK;QACpD,OAAO,6LAAA,CAAA,eAAY,CAAC,IAAI;IAC1B;IAEA,yBAAyB;IACzB,MAAM,EACJ,MAAM,EAAE,OAAO,EAAE,EAClB,GAAG,MAAM,uHAAA,CAAA,WAAQ,CAAC,IAAI,CAAC,UAAU;IAClC,IAAI,CAAC,SAAS;QACZ,MAAM,WAAW,IAAI,IAAI,eAAe,IAAI,GAAG;QAC/C,OAAO,6LAAA,CAAA,eAAY,CAAC,QAAQ,CAAC;IAC/B;IAEA,qDAAqD;IACrD,OAAO,6LAAA,CAAA,eAAY,CAAC,IAAI;AAC1B;AAEO,MAAM,SAAS;IACpB,SAAS;QAAC;KAA6B;AACzC"}}]
}