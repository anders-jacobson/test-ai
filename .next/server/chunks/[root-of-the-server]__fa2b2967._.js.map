{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///Users/andogpp/Documents/dev/Chas/11-examensarbete/test-ai/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client';\n\nconst globalForPrisma = globalThis as unknown as {\n  prisma: PrismaClient | undefined;\n};\n\nexport const prisma = globalForPrisma.prisma ?? new PrismaClient();\n\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma;\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,kBAAkB;AAIjB,MAAM,SAAS,gBAAgB,MAAM,IAAI,IAAI,6HAAA,CAAA,eAAY;AAEhE,wCAA2C,gBAAgB,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 82, "column": 0}, "map": {"version":3,"sources":["file:///Users/andogpp/Documents/dev/Chas/11-examensarbete/test-ai/app/api/prisma-test/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\n\nexport async function GET() {\n  try {\n    // 1. Create a test profile (if not exists)\n    const email = 'testuser@example.com';\n    let profile = await prisma.profile.upsert({\n      where: { email },\n      update: {},\n      create: {\n        email,\n        cooperative: 'Test Cooperative',\n        name: 'Initial Name',\n      },\n    });\n\n    // 2. Read the profile\n    const readProfile = await prisma.profile.findUnique({ where: { email } });\n\n    // 3. Update the profile's name\n    const updatedProfile = await prisma.profile.update({\n      where: { email },\n      data: { name: 'Updated Name' },\n    });\n\n    // 4. Delete the profile\n    const deletedProfile = await prisma.profile.delete({ where: { email } });\n\n    return NextResponse.json({\n      success: true,\n      created: profile,\n      read: readProfile,\n      updated: updatedProfile,\n      deleted: deletedProfile,\n    });\n  } catch (error: any) {\n    return NextResponse.json({ success: false, error: error.message }, { status: 500 });\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,eAAe;IACpB,IAAI;QACF,2CAA2C;QAC3C,MAAM,QAAQ;QACd,IAAI,UAAU,MAAM,+GAAA,CAAA,SAAM,CAAC,OAAO,CAAC,MAAM,CAAC;YACxC,OAAO;gBAAE;YAAM;YACf,QAAQ,CAAC;YACT,QAAQ;gBACN;gBACA,aAAa;gBACb,MAAM;YACR;QACF;QAEA,sBAAsB;QACtB,MAAM,cAAc,MAAM,+GAAA,CAAA,SAAM,CAAC,OAAO,CAAC,UAAU,CAAC;YAAE,OAAO;gBAAE;YAAM;QAAE;QAEvE,+BAA+B;QAC/B,MAAM,iBAAiB,MAAM,+GAAA,CAAA,SAAM,CAAC,OAAO,CAAC,MAAM,CAAC;YACjD,OAAO;gBAAE;YAAM;YACf,MAAM;gBAAE,MAAM;YAAe;QAC/B;QAEA,wBAAwB;QACxB,MAAM,iBAAiB,MAAM,+GAAA,CAAA,SAAM,CAAC,OAAO,CAAC,MAAM,CAAC;YAAE,OAAO;gBAAE;YAAM;QAAE;QAEtE,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,SAAS;YACT,MAAM;YACN,SAAS;YACT,SAAS;QACX;IACF,EAAE,OAAO,OAAY;QACnB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;YAAO,OAAO,MAAM,OAAO;QAAC,GAAG;YAAE,QAAQ;QAAI;IACnF;AACF","debugId":null}}]
}