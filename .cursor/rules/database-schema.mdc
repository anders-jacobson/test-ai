---
description: 
globs: 
alwaysApply: false
---
# üóÑÔ∏è Database Schema & Access Patterns

## üö® CRITICAL DATABASE ACCESS RULES

### ‚ùå NEVER MIX DATABASE ACCESS PATTERNS
- **NEVER use `supabase.from('TableName')` for application data**
- **ALWAYS use Prisma for all database queries**
- Supabase client is ONLY for authentication, not data queries

### ‚úÖ ALWAYS Use Prisma for Data Operations
```typescript
// ‚úÖ CORRECT - Use Prisma for all data operations
import { prisma } from '@/lib/prisma';

const user = await prisma.user.findUnique({
  where: { email: authUser.email! },
  select: { cooperative: true, name: true, email: true }
});

// ‚ùå WRONG - Never use Supabase for data queries
const { data } = await supabase.from('User')...
```

### üîç User Lookup Pattern (STANDARD)
**Always lookup users by email, never by Auth ID:**
```typescript
// ‚úÖ CORRECT - Standard user lookup pattern
async function getCurrentUserId() {
  const supabase = await createClient();
  const { data: { user } } = await supabase.auth.getUser();
  if (!user?.email) throw new Error('Not authenticated');
  
  const userRecord = await prisma.user.findUnique({
    where: { email: user.email },
    select: { id: true }
  });
  if (!userRecord) throw new Error('User not found');
  return userRecord.id;
}
```

## üìä Current Prisma Schema (prisma/schema.prisma)

```prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id             String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email          String          @unique
  name           String?
  cooperative    String          // Required: Housing cooperative name
  createdAt      DateTime        @default(now())
  borrowers      Borrower[]
  keyTypes       KeyType[]
  lendingRecords LendingRecord[]
}

model KeyType {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  label       String    @db.VarChar(2)     // e.g., "A1", "B2"
  function    String    @db.VarChar(100)   // e.g., "Main entrance"
  accessArea  String?                      // Optional access description
  userId      String    @db.Uuid
  createdAt   DateTime  @default(now())
  keyCopies   KeyCopy[]
  user        User      @relation(fields: [userId], references: [id])
}

model KeyCopy {
  id             String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  keyTypeId      String          @db.Uuid
  copyNumber     Int
  status         KeyStatus       @default(AVAILABLE)
  createdAt      DateTime        @default(now())
  keyType        KeyType         @relation(fields: [keyTypeId], references: [id], onDelete: Cascade)
  lendingRecords LendingRecord[]

  @@unique([keyTypeId, copyNumber])
}

model Borrower {
  id             String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String          @db.VarChar(100)
  email          String?         @db.VarChar(255)
  phone          String?         @db.VarChar(20)
  company        String?         @db.VarChar(100)
  userId         String          @db.Uuid
  createdAt      DateTime        @default(now())
  user           User            @relation(fields: [userId], references: [id])
  lendingRecords LendingRecord[]
}

model LendingRecord {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  keyCopyId    String    @db.Uuid
  borrowerId   String    @db.Uuid
  lentDate     DateTime  @default(now())
  endDate      DateTime?
  notes        String?
  idChecked    Boolean   @default(false)
  returnedDate DateTime?
  userId       String    @db.Uuid
  createdAt    DateTime  @default(now())
  borrower     Borrower  @relation(fields: [borrowerId], references: [id], onDelete: Cascade)
  user         User      @relation(fields: [userId], references: [id])
  keyCopy      KeyCopy   @relation(fields: [keyCopyId], references: [id], onDelete: Cascade)
}

enum KeyStatus {
  AVAILABLE
  OUT
  LOST
}
```

## üèóÔ∏è Standard Prisma Patterns

### Server Actions Pattern
```typescript
'use server';
import { prisma } from '@/lib/prisma';
import { createClient } from '@/utils/supabase/server';

async function getCurrentUserId() {
  const supabase = await createClient();
  const { data: { user } } = await supabase.auth.getUser();
  if (!user?.email) throw new Error('Not authenticated');
  
  const userRecord = await prisma.user.findUnique({
    where: { email: user.email },
    select: { id: true }
  });
  if (!userRecord) throw new Error('User not found');
  return userRecord.id;
}

export async function getKeyStatusSummary() {
  const userId = await getCurrentUserId();
  
  const keyTypes = await prisma.keyType.findMany({
    where: { userId },
    select: {
      id: true,
      label: true,
      keyCopies: { select: { status: true } }
    }
  });
  
  return keyTypes.map(kt => {
    const counts = { Available: 0, InUse: 0, Lost: 0 };
    kt.keyCopies.forEach(copy => {
      if (copy.status === 'AVAILABLE') counts.Available++;
      else if (copy.status === 'OUT') counts.InUse++;
      else if (copy.status === 'LOST') counts.Lost++;
    });
    return { keyType: kt.label, ...counts };
  });
}
```

### Layout Component Pattern (Server Component)
```typescript
import { createClient } from '@/utils/supabase/server';
import { prisma } from '@/lib/prisma';

async function Layout({ children }: { children: React.ReactNode }) {
  const supabase = await createClient();
  const { data: { user: authUser } } = await supabase.auth.getUser();

  let cooperative: string | undefined;
  let user: { name: string; email: string } | undefined;

  if (authUser) {
    try {
      const profile = await prisma.user.findUnique({
        where: { email: authUser.email! },
        select: { cooperative: true, name: true, email: true }
      });

      if (profile) {
        cooperative = profile.cooperative;
        user = {
          name: profile.name || '',
          email: profile.email
        };
      }
    } catch (error) {
      console.log('‚ùå Prisma query error:', error);
    }
  }

  return (
    <SidebarProvider>
      <DashboardSidebar cooperative={cooperative} user={user} />
      <SidebarInset>{children}</SidebarInset>
    </SidebarProvider>
  );
}
```

## üîß Prisma Client Setup (lib/prisma.ts)
```typescript
import { PrismaClient } from '@prisma/client';

const globalForPrisma = globalThis as unknown as {
  prisma: PrismaClient | undefined;
};

export const prisma = globalForPrisma.prisma ?? new PrismaClient();

if (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma;
```

## üö® Common Mistakes to Avoid

### 1. Mixing Database Access Patterns
```typescript
// ‚ùå WRONG - Don't mix Supabase queries with Prisma
const { data: profile } = await supabase.from('User')...
const keyTypes = await prisma.keyType.findMany()...

// ‚úÖ CORRECT - Use Prisma consistently
const profile = await prisma.user.findUnique()...
const keyTypes = await prisma.keyType.findMany()...
```

### 2. Wrong User Lookup Method
```typescript
// ‚ùå WRONG - Don't lookup by Auth ID
const profile = await prisma.user.findUnique({
  where: { id: authUser.id }  // Auth ID ‚â† Database ID
});

// ‚úÖ CORRECT - Always lookup by email
const profile = await prisma.user.findUnique({
  where: { email: authUser.email! }
});
```

### 3. Inconsistent Error Handling
```typescript
// ‚úÖ CORRECT - Always handle Prisma errors properly
try {
  const user = await prisma.user.findUnique({
    where: { email: authUser.email! }
  });
  if (!user) {
    console.log('User not found - may need profile completion');
    return null;
  }
  return user;
} catch (error) {
  console.log('Database error:', error);
  throw new Error('Failed to fetch user');
}
```

## üìã TypeScript Types (Auto-generated by Prisma)

Generate types with: `npx prisma generate`

```typescript
export type User = {
  id: string
  email: string
  name: string | null
  cooperative: string
  createdAt: Date
}

export type KeyType = {
  id: string
  label: string
  function: string
  accessArea: string | null
  userId: string
  createdAt: Date
}

export type KeyCopy = {
  id: string
  keyTypeId: string
  copyNumber: number
  status: KeyStatus
  createdAt: Date
}

export enum KeyStatus {
  AVAILABLE = 'AVAILABLE',
  OUT = 'OUT',
  LOST = 'LOST'
}
```

## üîÑ Database Migration Commands
```bash
# Generate Prisma client after schema changes
npx prisma generate

# Create new migrations
npx prisma migrate dev --name descriptive_migration_name

# Reset database (development only)
npx prisma migrate reset

# View database in Prisma Studio
npx prisma studio
```

## üéØ Remember: Supabase vs Prisma Roles

- **Supabase**: Authentication only (`supabase.auth.*`)
- **Prisma**: All data operations (`prisma.modelName.*`)
- **Never mix them** for database queries!
