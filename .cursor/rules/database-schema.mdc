---
description: 
globs: 
alwaysApply: false
---
# Database Schema (Prisma + Supabase)

## Prisma Schema (prisma/schema.prisma)
```prisma
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Profile {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email         String   @unique
  name          String?
  cooperative   String   // Required: Each user belongs to exactly one cooperative
  createdAt     DateTime @default(now()) @map("created_at")
  
  // Relations
  keyTypes      KeyType[]
  borrowers     Borrower[]
  lendingRecords LendingRecord[]
  
  @@map("profiles")
}

model KeyType {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String   @db.VarChar(100)
  accessArea    String?  @map("access_area")
  totalCopies   Int      @default(0) @map("total_copies")
  cooperativeId String   @map("cooperative_id") @db.Uuid
  createdAt     DateTime @default(now()) @map("created_at")
  
  // Relations
  profile       Profile    @relation(fields: [cooperativeId], references: [id])
  keyCopies     KeyCopy[]
  
  @@map("key_types")
}

model KeyCopy {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  keyTypeId  String    @map("key_type_id") @db.Uuid
  copyNumber Int       @map("copy_number")
  status     KeyStatus @default(AVAILABLE)
  createdAt  DateTime  @default(now()) @map("created_at")
  
  // Relations
  keyType        KeyType         @relation(fields: [keyTypeId], references: [id], onDelete: Cascade)
  lendingRecords LendingRecord[]
  
  @@unique([keyTypeId, copyNumber])
  @@map("key_copies")
}

model Borrower {
  id            String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String   @db.VarChar(100)
  email         String?  @db.VarChar(255)
  phone         String?  @db.VarChar(20)
  company       String?  @db.VarChar(100)
  cooperativeId String   @map("cooperative_id") @db.Uuid
  createdAt     DateTime @default(now()) @map("created_at")
  
  // Relations
  profile        Profile         @relation(fields: [cooperativeId], references: [id])
  lendingRecords LendingRecord[]
  
  @@map("borrowers")
}

model LendingRecord {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  keyCopyId     String    @map("key_copy_id") @db.Uuid
  borrowerId    String    @map("borrower_id") @db.Uuid
  lentDate      DateTime  @default(now()) @map("lent_date") @db.Date
  endDate       DateTime? @map("end_date") @db.Date
  notes         String?
  idChecked     Boolean   @default(false) @map("id_checked")
  returnedDate  DateTime? @map("returned_date") @db.Date
  cooperativeId String    @map("cooperative_id") @db.Uuid
  createdAt     DateTime  @default(now()) @map("created_at")
  
  // Relations
  keyCopy    KeyCopy  @relation(fields: [keyCopyId], references: [id], onDelete: Cascade)
  borrower   Borrower @relation(fields: [borrowerId], references: [id], onDelete: Cascade)
  profile    Profile  @relation(fields: [cooperativeId], references: [id])
  
  @@map("lending_records")
}

enum KeyStatus {
  AVAILABLE
  OUT
  LOST
  
  @@map("key_status")
}
```

## Generated TypeScript Types (from Prisma)
```typescript
// Auto-generated by Prisma - DO NOT EDIT MANUALLY

export type Profile = {
  id: string
  email: string
  name: string | null
  cooperative: string // Required cooperative name
  createdAt: Date
}

export type KeyType = {
  id: string
  name: string
  accessArea: string | null
  totalCopies: number
  cooperativeId: string
  createdAt: Date
}

export type KeyCopy = {
  id: string
  keyTypeId: string
  copyNumber: number
  status: KeyStatus
  createdAt: Date
}

export type Borrower = {
  id: string
  name: string
  email: string | null
  phone: string | null
  company: string | null
  cooperativeId: string
  createdAt: Date
}

export type LendingRecord = {
  id: string
  keyCopyId: string
  borrowerId: string
  lentDate: Date
  endDate: Date | null
  notes: string | null
  idChecked: boolean
  returnedDate: Date | null
  cooperativeId: string
  createdAt: Date
}

export enum KeyStatus {
  AVAILABLE = 'AVAILABLE',
  OUT = 'OUT',
  LOST = 'LOST'
}
```

## Prisma Client Setup (lib/prisma.ts)
```typescript
import { PrismaClient } from '@prisma/client'

const globalForPrisma = globalThis as unknown as {
  prisma: PrismaClient | undefined
}

export const prisma = globalForPrisma.prisma ?? new PrismaClient()

if (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma
```

## Custom Hook Patterns with Prisma
```typescript
export function useKeyTypes() {
  const [data, setData] = useState<KeyType[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  
  useEffect(() => {
    async function fetchKeyTypes() {
      try {
        const response = await fetch('/api/key-types');
        if (!response.ok) throw new Error('Failed to fetch');
        const keyTypes = await response.json();
        setData(keyTypes);
      } catch (err) {
        setError(err instanceof Error ? err.message : 'Unknown error');
      } finally {
        setLoading(false);
      }
    }
    
    fetchKeyTypes();
  }, []);
  
  return { data, loading, error };
}
```

## Server Actions with Prisma
```typescript
'use server'

import { prisma } from '@/lib/prisma'
import { revalidatePath } from 'next/cache'

export async function createKeyType(formData: FormData) {
  try {
    const keyType = await prisma.keyType.create({
      data: {
        name: formData.get('name') as string,
        accessArea: formData.get('accessArea') as string,
        totalCopies: parseInt(formData.get('totalCopies') as string),
        cooperativeId: formData.get('cooperativeId') as string,
      }
    });
    
    revalidatePath('/dashboard');
    return { success: true, data: keyType };
  } catch (error) {
    console.error('Failed to create key type:', error);
    return { success: false, error: 'Failed to create key type' };
  }
}
```
