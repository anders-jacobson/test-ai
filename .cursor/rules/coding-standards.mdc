---
description: 
globs: 
alwaysApply: false
---
# Coding Standards (Next.js 15 + App Router)

## MANDATORY Component Usage Rules

### 1. ALWAYS Use shadcn/ui Components - NEVER Plain HTML
```typescript
// ❌ WRONG - Never use plain HTML elements
<button onClick={handleClick}>Click me</button>
<input type="text" placeholder="Search..." />
<div className="table">...</div>

// ✅ CORRECT - Always use shadcn/ui components
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';

<Button onClick={handleClick}>Click me</Button>
<Input placeholder="Search..." />
<Table>...</Table>
```

### 2. ALWAYS Use Tabler Icons - NEVER Other Icon Libraries
```typescript
// ❌ WRONG - Don't use Lucide or other icon libraries
import { Plus, Trash2 } from 'lucide-react';

// ✅ CORRECT - Always use Tabler Icons
import { IconPlus, IconTrash, IconEdit, IconFilter, IconDots } from '@tabler/icons-react';

// Standard icon sizing
<IconPlus className="h-4 w-4" />        // Standard icon
<IconPlus className="h-3.5 w-3.5" />    // Small icon in buttons
<IconPlus className="h-5 w-5" />        // Large icon
```

### 3. Button Component Usage Patterns
```typescript
// Primary action buttons
<Button>Primary Action</Button>
<Button variant="default">Same as above</Button>

// Secondary actions
<Button variant="outline">Secondary Action</Button>
<Button variant="secondary">Alternative Secondary</Button>

// Destructive actions
<Button variant="destructive">Delete Item</Button>

// Ghost buttons for subtle actions
<Button variant="ghost">Subtle Action</Button>

// Icon buttons
<Button size="icon" variant="ghost">
  <IconDots className="h-4 w-4" />
</Button>

// Buttons with icons
<Button className="gap-1">
  <IconPlus className="h-3.5 w-3.5" />
  Add Item
</Button>
```

## File Naming Conventions
- **Pages**: `page.tsx` (App Router pages)
- **Layouts**: `layout.tsx` (App Router layouts)
- **Components**: PascalCase (`KeyDashboard.tsx`)
- **Server Actions**: camelCase (`createKeyType.ts`)
- **Hooks**: camelCase with 'use' prefix (`useKeyTypes.ts`)
- **Utils**: camelCase (`formatDate.ts`)
- **Types**: PascalCase (`KeyType.ts`)

## Server Component Structure (Default)
```typescript
import { prisma } from '@/lib/prisma'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'

interface PageProps {
  params: { id: string }
  searchParams: { [key: string]: string | string[] | undefined }
}

export default async function ServerComponentPage({ params, searchParams }: PageProps) {
  // Server-side data fetching
  const keyTypes = await prisma.keyType.findMany({
    where: { cooperativeId: params.id },
    include: { keyCopies: true }
  });
  
  return (
    <div className="container mx-auto p-4">
      <Card>
        <CardHeader>
          <CardTitle>Key Management</CardTitle>
        </CardHeader>
        <CardContent>
          <KeyDashboard keyTypes={keyTypes} />
        </CardContent>
      </Card>
    </div>
  );
}
```

## Client Component Structure
```typescript
'use client'

import { useState, useEffect } from 'react'
import { KeyType } from '@prisma/client'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { IconPlus, IconLoader } from '@tabler/icons-react'

interface ComponentProps {
  /** JSDoc comment for each prop */
  keyTypes: KeyType[]
  onUpdate?: (key: KeyType) => void
}

export default function ClientComponent({ keyTypes, onUpdate }: ComponentProps) {
  // 1. State hooks first
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)
  
  // 2. Event handlers
  const handleSubmit = async (formData: FormData) => {
    setLoading(true)
    try {
      const result = await createKeyType(formData)
      if (!result.success) throw new Error(result.error)
      onUpdate?.(result.data)
    } catch (error) {
      setError(error instanceof Error ? error.message : 'Unknown error')
    } finally {
      setLoading(false)
    }
  }
  
  // 3. Effects
  useEffect(() => {
    // Client-side effects only
  }, [])
  
  // 4. Render with shadcn/ui components
  if (loading) return (
    <div className="flex items-center gap-2">
      <IconLoader className="h-4 w-4 animate-spin" />
      Loading...
    </div>
  )
  
  if (error) return (
    <Card className="border-destructive">
      <CardContent className="pt-6">
        <p className="text-destructive">Error: {error}</p>
      </CardContent>
    </Card>
  )
  
  return (
    <Card>
      <CardHeader>
        <CardTitle>Add Key Type</CardTitle>
      </CardHeader>
      <CardContent>
        <form action={handleSubmit} className="space-y-4">
          <Input placeholder="Key name..." name="name" required />
          <Button type="submit" className="gap-1">
            <IconPlus className="h-3.5 w-3.5" />
            Add Key Type
          </Button>
        </form>
      </CardContent>
    </Card>
  )
}
```

## Data Table Pattern (Mandatory shadcn/ui + TanStack Table)
```typescript
'use client';

import * as React from 'react';
import { ColumnDef, useReactTable, getCoreRowModel, flexRender } from '@tanstack/react-table';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { DropdownMenu, DropdownMenuContent, DropdownMenuTrigger, DropdownMenuCheckboxItem } from '@/components/ui/dropdown-menu';
import { IconFilter, IconPlus } from '@tabler/icons-react';

interface DataTableProps<TData> {
  columns: ColumnDef<TData>[];
  data: TData[];
}

export function DataTable<TData>({ columns, data }: DataTableProps<TData>) {
  const table = useReactTable({
    data,
    columns,
    getCoreRowModel: getCoreRowModel(),
  });

  return (
    <div className="space-y-4">
      <div className="flex items-center justify-between">
        <Input
          placeholder="Filter by name..."
          className="max-w-xs"
        />
        <div className="flex items-center gap-2">
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="outline" className="gap-1">
                <IconFilter className="h-3.5 w-3.5" />
                Filter
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent>
              <DropdownMenuCheckboxItem>Option 1</DropdownMenuCheckboxItem>
            </DropdownMenuContent>
          </DropdownMenu>
          <Button className="gap-1">
            <IconPlus className="h-3.5 w-3.5" />
            Add Item
          </Button>
        </div>
      </div>
      <div className="rounded-md border">
        <Table>
          <TableHeader>
            {table.getHeaderGroups().map((headerGroup) => (
              <TableRow key={headerGroup.id}>
                {headerGroup.headers.map((header) => (
                  <TableHead key={header.id}>
                    {flexRender(header.column.columnDef.header, header.getContext())}
                  </TableHead>
                ))}
              </TableRow>
            ))}
          </TableHeader>
          <TableBody>
            {table.getRowModel().rows.map((row) => (
              <TableRow key={row.id}>
                {row.getVisibleCells().map((cell) => (
                  <TableCell key={cell.id}>
                    {flexRender(cell.column.columnDef.cell, cell.getContext())}
                  </TableCell>
                ))}
              </TableRow>
            ))}
          </TableBody>
        </Table>
      </div>
    </div>
  );
}
```

## Server Actions Pattern
```typescript
'use server'

import { prisma } from '@/lib/prisma'
import { revalidatePath } from 'next/cache'
import { redirect } from 'next/navigation'

export async function createKeyType(formData: FormData) {
  try {
    // Input validation
    const name = formData.get('name') as string
    const totalCopies = parseInt(formData.get('totalCopies') as string) || 0
    
    if (!name || name.length < 2) {
      return { success: false, error: 'Name must be at least 2 characters' }
    }
    
    // Create key type and copies in transaction
    const result = await prisma.$transaction(async (tx) => {
      // Create key type
      const keyType = await tx.keyType.create({
        data: {
          name,
          accessArea: formData.get('accessArea') as string,
          totalCopies,
          cooperativeId: formData.get('cooperativeId') as string,
        }
      })
      
      // Bulk create key copies
      if (totalCopies > 0) {
        const copies = Array.from({ length: totalCopies }, (_, i) => ({
          keyTypeId: keyType.id,
          copyNumber: i + 1,
          status: 'AVAILABLE' as const,
        }))
        
        await tx.keyCopy.createMany({
          data: copies
        })
      }
      
      return keyType
    })
    
    // Revalidate and redirect
    revalidatePath('/dashboard')
    return { success: true, data: result }
  } catch (error) {
    console.error('Failed to create key type:', error)
    return { success: false, error: 'Failed to create key type' }
  }
}
```

## API Route Pattern (App Router)
```typescript
import { NextRequest, NextResponse } from 'next/server'
import { prisma } from '@/lib/prisma'

export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url)
    const cooperativeId = searchParams.get('cooperativeId')
    
    const keyTypes = await prisma.keyType.findMany({
      where: cooperativeId ? { cooperativeId } : {},
      include: { keyCopies: true }
    })
    
    return NextResponse.json(keyTypes)
  } catch (error) {
    console.error('API Error:', error)
    return NextResponse.json(
      { error: 'Internal Server Error' },
      { status: 500 }
    )
  }
}

export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    
    const keyType = await prisma.keyType.create({
      data: body
    })
    
    return NextResponse.json(keyType, { status: 201 })
  } catch (error) {
    console.error('API Error:', error)
    return NextResponse.json(
      { error: 'Failed to create key type' },
      { status: 400 }
    )
  }
}
```

## Error Handling Patterns
```typescript
// Server Component Error Handling
import { notFound } from 'next/navigation'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'

export default async function KeyPage({ params }: { params: { id: string } }) {
  try {
    const keyType = await prisma.keyType.findUnique({
      where: { id: params.id }
    })
    
    if (!keyType) {
      notFound()
    }
    
    return <KeyDetails keyType={keyType} />
  } catch (error) {
    console.error('Error fetching key type:', error)
    throw error // This will be caught by error.tsx
  }
}

// Client Component Error Handling
'use client'

import { Button } from '@/components/ui/button'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'

export default function ErrorComponent({
  error,
  reset,
}: {
  error: Error & { digest?: string }
  reset: () => void
}) {
  return (
    <div className="flex flex-col items-center justify-center min-h-[400px]">
      <Card className="w-full max-w-md">
        <CardHeader>
          <CardTitle>Something went wrong!</CardTitle>
        </CardHeader>
        <CardContent>
          <Button onClick={() => reset()}>
            Try again
          </Button>
        </CardContent>
      </Card>
    </div>
  )
}
```

## Tailwind CSS v4 Guidelines

### Configuration Structure:
```css
/* app/globals.css - ALL theme config here */
@import "tailwindcss";

@theme {
  --radius: 0.65rem;
  --color-primary: var(--primary);
  --color-secondary: var(--secondary);
  /* All color and spacing configuration */
}
```

```javascript
// tailwind.config.js - ONLY plugins here
import forms from '@tailwindcss/forms';
import typography from '@tailwindcss/typography';

const config = {
  plugins: [forms, typography], // Only plugins, no theme config
};

export default config;
```

### Responsive Design Patterns:
- Mobile-first approach: `class="text-sm md:text-base lg:text-lg"`
- Grid layouts: `grid-cols-1 md:grid-cols-2 lg:grid-cols-3`
- Spacing: `p-4 md:p-6 lg:p-8`
- Typography: `text-base lg:text-lg` (minimum 16px for accessibility)

## Accessibility Guidelines
- **Font Sizes**: Base 16px minimum, larger for seniors: `text-base lg:text-lg`
- **Touch Targets**: Minimum 44px: `min-h-[44px] min-w-[44px]`
- **Contrast**: Use semantic color tokens: `text-foreground bg-background`
- **Focus States**: Automatic with shadcn/ui components
- **Labels**: Always include proper labels and ARIA attributes
- **Error States**: Use `variant="destructive"` for error buttons and styling

## TypeScript Rules
- Strict mode enabled in `tsconfig.json`
- Use Prisma generated types: `import { KeyType } from '@prisma/client'`
- Always type component props with interfaces
- Use `React.ComponentProps<'button'>` for extending HTML element props
- Prefer type assertions over any: `formData.get('name') as string`

## Form Handling with Server Actions
```typescript
'use client'

import { useFormState } from 'react-dom'
import { createKeyType } from '@/app/actions/keyTypes'

const initialState = { success: false, error: '' }

export default function KeyTypeForm() {
  const [state, formAction] = useFormState(createKeyType, initialState)
  
  return (
    <form action={formAction} className="space-y-4">
      <input
        name="name"
        type="text"
        placeholder="Key type name"
        className="w-full px-3 py-2 border rounded"
        required
      />
      {state.error && (
        <p className="text-red-500 text-sm">{state.error}</p>
      )}
      <button
        type="submit"
        className="w-full bg-blue-500 text-white py-2 rounded hover:bg-blue-600"
      >
        Create Key Type
      </button>
    </form>
  )
}
```

## Next.js 15 Best Practices
- **Server Components by default** - Only add 'use client' when needed
- **Streaming with Suspense** for better UX
- **Server Actions** for mutations instead of API routes
- **Parallel Routes** for complex layouts
- **Route Groups** for organization: `(dashboard)/keys/page.tsx`
- **Middleware** for authentication: `middleware.ts`

## Next.js Built-in Components Usage
- Always use Next.js built-in components for their intended purposes:
  - Use `next/image` (`<Image />`) for all images to benefit from automatic optimization, lazy loading, and responsive sizing.
  - Use `next/link` (`<Link />`) for all internal navigation to enable client-side routing and prefetching.
  - Use `next/navigation` (`<NavLink />` or `useRouter`) for advanced navigation patterns.
- Do **not** use native `<img>` or `<a>` tags for internal navigation or images unless there is a specific reason (e.g., external links, non-optimized images).
- Update all pages and components to follow this rule when relevant.
